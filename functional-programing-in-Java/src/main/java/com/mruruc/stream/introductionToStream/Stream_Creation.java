package com.mruruc.stream.introductionToStream;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Stream_Creation {
    public static void main(String[] args) {

        /*
         * Creating Streams from Collections
         * Every collection in Java, which is derived from the Collection interface (like List, Set, etc.),
         * has methods to create sequential and parallel streams:
         */

        // Sequential Stream:
        // This is the most common type of stream, and it processes the elements in sequence.

        Collection<String> collections=  Arrays.asList("A","B","C","D");
        Stream<String> stream = collections.stream();
        stream.close();

        //Parallel Stream:
        // This type of stream divides the work into multiple chunks for parallel execution,
        // which can be beneficial for large datasets on multicore CPUs.

        List<String> names= List.of("Waflo","John","Jess","Bob","Jane");

        Stream<String> stringStream = names.parallelStream();
        stringStream.close();


        // 2. Using Factory Methods

        // Stream.of(): This method can be used to create a stream from individual objects.

        Stream<Integer> integerStream = Stream.of(12, 56, 7, 90, -4);
        integerStream.close();

        // IntStream.range() and IntStream.rangeClosed():
        // These methods are used to create streams of primitive int values.

        IntStream range = IntStream.range(20, 30);
        range.close();
        IntStream intStream = IntStream.rangeClosed(5, 20);

        OptionalDouble average = intStream.average();
        integerStream.close();

        /**
         * Creating Streams from I/O Channels
         * Java provides the ability to create streams from I/O sources, such as files:
         *
         * Files.lines(): This method can be used to read lines from a file as a stream.
         */

        File file =
                new File("C:\\Users\\uruco\\Desktop\\v1\\src\\main\\java\\resource\\demo.txt");


        try (Stream<String> lines = Files.lines(file.toPath())) {

         //   lines.forEach(System.out::println);
            lines.close();

        } catch (IOException exception) {
            System.out.println(exception.getMessage());
        }


        /**
         * Infinite Streams
         * There are methods to create infinite streams, which can be useful in various scenarios:
         *
         * Stream.iterate(): This produces an infinite ordered stream. Each subsequent element is generated by applying a function to the previous element.
         */

        Stream<Integer> limit = Stream.iterate(2, (n) -> n + 2).limit(20);

        // limit.forEach(System.out::println);
         limit.close();


        /**
         * Stream.generate(): This produces an infinite unordered stream. Each element is generated by a provided Supplier.
         */

        List<Integer> collect = Stream.generate(() -> (int) (Math.random() * 100)).limit(10).toList();
//        collect.forEach((element)-> System.out.print(element +" "));
//        System.out.println();
//        System.out.println("The Size of Collection: "+collect.size());




    }
}
